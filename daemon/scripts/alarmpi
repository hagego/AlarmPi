#!/bin/bash
### BEGIN INIT INFO
# Provides:          AlarmPi
# Required-Start:    $remote_fs $syslog $network
# Required-Stop:     $remote_fs $syslog $network
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: AlarmPi
# Description:       AlarmPi
### END INIT INFO

#
# init script for AlarmPi
# based on https://gustavostraube.wordpress.com/2009/11/05/writing-an-init-script-for-a-java-application/
#

APPNAME="AlarmPi"
PIDFILE="/tmp/pidlist"
BASEDIR="/opt/alarmpi"
LOGFILE="/var/log/alarmpi/init.log"
JARFILE="$BASEDIR/alarmpi.jar"

# Check the application status
#
# This function checks if the application is running
check_status() {
  # Running ps with some arguments to check if the PID exists
  # -C : specifies the command name
  # -o : determines how columns must be displayed
  # h : hides the data header
  touch $PIDFILE
  cat /dev/null > $PIDFILE
  ps -e -o pid,cmd > $PIDFILE
  s=`cat $PIDFILE | grep $JARFILE`
  s=`echo $s | cut -d " " -f 1`

  # If something was returned by the ps command, this function returns the PID
  echo "check_status found PID $s" >> $LOGFILE
  if [ $s ] ; then
      echo $s
      return
  fi

  # In any another case, return 0
  echo 0
}

# Starts the application
start() {
  # At first checks if the application is already started calling check_status
  pid=$(check_status) 

  if [ $pid -ne 0 ] ; then
    echo "$APPNAME is already running"
    exit 1
  fi

  # If the application isn’t running, start it
  echo -n "Starting $APPNAME: attempt  "
  # Redirects default and error output to a log file
  # GPIO lib sometimes crashes, therefore loop until run
  i="1"
  while [ $pid -eq 0 ] && [ $i -lt 5 ]
  do
    echo -e -n "\b$i"
    echo "starting $APPNAME: attempt $i" >> $LOGFILE
    /usr/bin/java -jar $JARFILE < /dev/null >> $LOGFILE 2>&1 &
    sleep 10
    
    pid=$(check_status)
    i=$(($i+1))
  done
  
  if [ $i -lt 10 ] ; then
    echo -e "\b\b\b\b\b\b\b\b\bOK       "
  else
    echo -e "\b\b\b\b\b\b\b\b\bFAILED   "
  fi
}

# Stops the application
stop() {
  # Like as the start function, checks the application status
  pid=$(check_status)

  if [ $pid -eq 0 ] ; then
    echo "$APPNAME is already stopped"
    exit 1
  fi

  # Kills the application process
  echo -n "Stopping $APPNAME (PID=$pid): "
  kill $pid
  
  sleep 1
  pid=$(check_status)

  if [ $pid -ne 0 ] ; then
    echo "$APPNAME doesn't terminate - killing"
    kill -9 $pid
  fi
  
  echo "OK"
}

# Show the application status
status() {
  # The check_status function, again…
  pid=$(check_status)

  # If the PID was returned means the application is running
  if [ $pid -ne 0 ] ; then
    echo "$APPNAME is started"
  else
    echo "$APPNAME is stopped"
  fi
}

# Main logic, a simple case to call functions
case "$1" in
  start)
    start
    ;;

  stop)
    stop
    ;;

  status)
    status
    ;;

  restart|reload)
    stop
    start
    ;;

  *)
    echo "Usage: $0 {start|stop|restart|reload|status}"
    exit 1
esac

exit 0
